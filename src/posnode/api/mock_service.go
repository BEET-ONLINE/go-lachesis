// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Fantom-foundation/go-lachesis/src/posnode/api (interfaces: NodeServer)

package api

import (
	context "context"
	wire "github.com/Fantom-foundation/go-lachesis/src/inter/wire"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNodeServer is a mock of NodeServer interface
type MockNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeServerMockRecorder
}

// MockNodeServerMockRecorder is the mock recorder for MockNodeServer
type MockNodeServerMockRecorder struct {
	mock *MockNodeServer
}

// NewMockNodeServer creates a new mock instance
func NewMockNodeServer(ctrl *gomock.Controller) *MockNodeServer {
	mock := &MockNodeServer{ctrl: ctrl}
	mock.recorder = &MockNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNodeServer) EXPECT() *MockNodeServerMockRecorder {
	return _m.recorder
}

// GetEvent mocks base method
func (_m *MockNodeServer) GetEvent(_param0 context.Context, _param1 *EventRequest) (*wire.Event, error) {
	ret := _m.ctrl.Call(_m, "GetEvent", _param0, _param1)
	ret0, _ := ret[0].(*wire.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent
func (_mr *MockNodeServerMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetEvent", reflect.TypeOf((*MockNodeServer)(nil).GetEvent), arg0, arg1)
}

// GetPeerInfo mocks base method
func (_m *MockNodeServer) GetPeerInfo(_param0 context.Context, _param1 *PeerRequest) (*PeerInfo, error) {
	ret := _m.ctrl.Call(_m, "GetPeerInfo", _param0, _param1)
	ret0, _ := ret[0].(*PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo
func (_mr *MockNodeServerMockRecorder) GetPeerInfo(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPeerInfo", reflect.TypeOf((*MockNodeServer)(nil).GetPeerInfo), arg0, arg1)
}

// SyncEvents mocks base method
func (_m *MockNodeServer) SyncEvents(_param0 context.Context, _param1 *KnownEvents) (*KnownEvents, error) {
	ret := _m.ctrl.Call(_m, "SyncEvents", _param0, _param1)
	ret0, _ := ret[0].(*KnownEvents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncEvents indicates an expected call of SyncEvents
func (_mr *MockNodeServerMockRecorder) SyncEvents(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SyncEvents", reflect.TypeOf((*MockNodeServer)(nil).SyncEvents), arg0, arg1)
}
